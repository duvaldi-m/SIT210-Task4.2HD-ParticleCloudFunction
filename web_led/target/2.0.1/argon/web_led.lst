
/Users/duvaldi/Desktop/web_led/web_led/target/2.0.1/argon/web_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001264  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5280  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e5d8  000d5284  0001e5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001b0  2003e640  2003e640  0002e640  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d52ec  000d52ec  000252ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5314  000d5314  00025314  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00112deb  00000000  00000000  00025318  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012c66  00000000  00000000  00138103  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00028136  00000000  00000000  0014ad69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002488  00000000  00000000  00172e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006f60  00000000  00000000  00175327  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032dd9  00000000  00000000  0017c287  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f657  00000000  00000000  001af060  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010732c  00000000  00000000  001de6b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000061f8  00000000  00000000  002e59e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 f801 	bl	d5034 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 f809 	bl	d5050 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5d8 	.word	0x2003e5d8
   d4048:	000d5284 	.word	0x000d5284
   d404c:	2003e640 	.word	0x2003e640
   d4050:	2003e640 	.word	0x2003e640
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fef7 	bl	d4e50 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5254 	.word	0x000d5254
   d407c:	000d5278 	.word	0x000d5278

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b866 	b.w	d4150 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f87d 	bl	d4184 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bea1 	b.w	d4dd4 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 ba09 	b.w	d44a8 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 ba0f 	b.w	d44b8 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr
	...

000d40ac <_Z9ledToggle6String>:

SYSTEM_THREAD(ENABLED);

// This function is called when the Particle.function is called
int ledToggle(String command)
{
   d40ac:	b570      	push	{r4, r5, r6, lr}
    if (command.equals("green"))
   d40ae:	4924      	ldr	r1, [pc, #144]	; (d4140 <_Z9ledToggle6String+0x94>)
{
   d40b0:	4605      	mov	r5, r0
    if (command.equals("green"))
   d40b2:	f000 fce4 	bl	d4a7e <_ZNK6String6equalsEPKc>
   d40b6:	4604      	mov	r4, r0
   d40b8:	b168      	cbz	r0, d40d6 <_Z9ledToggle6String+0x2a>
    {
        digitalWrite(GREEN_LED, HIGH);
   d40ba:	2101      	movs	r1, #1
   d40bc:	2004      	movs	r0, #4
   d40be:	f000 ff48 	bl	d4f52 <digitalWrite>
        digitalWrite(RED_LED, LOW);
   d40c2:	2100      	movs	r1, #0
   d40c4:	2002      	movs	r0, #2
   d40c6:	f000 ff44 	bl	d4f52 <digitalWrite>
        digitalWrite(BLUE_LED, LOW);
   d40ca:	2100      	movs	r1, #0
   d40cc:	2003      	movs	r0, #3
   d40ce:	f000 ff40 	bl	d4f52 <digitalWrite>
        return 1;
   d40d2:	2001      	movs	r0, #1
    else
    {
        // Unknown option
        return -1;
    }
}
   d40d4:	bd70      	pop	{r4, r5, r6, pc}
    else if (command.equals("blue"))
   d40d6:	491b      	ldr	r1, [pc, #108]	; (d4144 <_Z9ledToggle6String+0x98>)
   d40d8:	4628      	mov	r0, r5
   d40da:	f000 fcd0 	bl	d4a7e <_ZNK6String6equalsEPKc>
   d40de:	4606      	mov	r6, r0
   d40e0:	b150      	cbz	r0, d40f8 <_Z9ledToggle6String+0x4c>
        digitalWrite(BLUE_LED, HIGH);
   d40e2:	2101      	movs	r1, #1
   d40e4:	2003      	movs	r0, #3
   d40e6:	f000 ff34 	bl	d4f52 <digitalWrite>
        digitalWrite(RED_LED, LOW);
   d40ea:	4621      	mov	r1, r4
   d40ec:	2002      	movs	r0, #2
   d40ee:	f000 ff30 	bl	d4f52 <digitalWrite>
        digitalWrite(GREEN_LED, LOW);
   d40f2:	4621      	mov	r1, r4
   d40f4:	2004      	movs	r0, #4
   d40f6:	e7ea      	b.n	d40ce <_Z9ledToggle6String+0x22>
    else if (command.equals("red"))
   d40f8:	4913      	ldr	r1, [pc, #76]	; (d4148 <_Z9ledToggle6String+0x9c>)
   d40fa:	4628      	mov	r0, r5
   d40fc:	f000 fcbf 	bl	d4a7e <_ZNK6String6equalsEPKc>
   d4100:	4604      	mov	r4, r0
   d4102:	b130      	cbz	r0, d4112 <_Z9ledToggle6String+0x66>
        digitalWrite(RED_LED, HIGH);
   d4104:	2101      	movs	r1, #1
   d4106:	2002      	movs	r0, #2
   d4108:	f000 ff23 	bl	d4f52 <digitalWrite>
        digitalWrite(GREEN_LED, LOW);
   d410c:	4631      	mov	r1, r6
   d410e:	2004      	movs	r0, #4
   d4110:	e7d9      	b.n	d40c6 <_Z9ledToggle6String+0x1a>
    else if (command.equals("off"))
   d4112:	490e      	ldr	r1, [pc, #56]	; (d414c <_Z9ledToggle6String+0xa0>)
   d4114:	4628      	mov	r0, r5
   d4116:	f000 fcb2 	bl	d4a7e <_ZNK6String6equalsEPKc>
   d411a:	b168      	cbz	r0, d4138 <_Z9ledToggle6String+0x8c>
        digitalWrite(RED_LED, LOW);
   d411c:	4621      	mov	r1, r4
   d411e:	2002      	movs	r0, #2
   d4120:	f000 ff17 	bl	d4f52 <digitalWrite>
        digitalWrite(GREEN_LED, LOW);
   d4124:	4621      	mov	r1, r4
   d4126:	2004      	movs	r0, #4
   d4128:	f000 ff13 	bl	d4f52 <digitalWrite>
        digitalWrite(BLUE_LED, LOW);
   d412c:	2003      	movs	r0, #3
   d412e:	4621      	mov	r1, r4
   d4130:	f000 ff0f 	bl	d4f52 <digitalWrite>
        return 0;
   d4134:	4620      	mov	r0, r4
   d4136:	e7cd      	b.n	d40d4 <_Z9ledToggle6String+0x28>
        return -1;
   d4138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d413c:	e7ca      	b.n	d40d4 <_Z9ledToggle6String+0x28>
   d413e:	bf00      	nop
   d4140:	000d50e0 	.word	0x000d50e0
   d4144:	000d50e6 	.word	0x000d50e6
   d4148:	000d50eb 	.word	0x000d50eb
   d414c:	000d50ef 	.word	0x000d50ef

000d4150 <setup>:

// The setup() method is called once when the device boots.
void setup()
{
   d4150:	b508      	push	{r3, lr}
    // 3 leds as output pins
    pinMode(RED_LED, OUTPUT);
   d4152:	2101      	movs	r1, #1
   d4154:	2002      	movs	r0, #2
   d4156:	f000 feeb 	bl	d4f30 <pinMode>
    pinMode(GREEN_LED, OUTPUT);
   d415a:	2101      	movs	r1, #1
   d415c:	2004      	movs	r0, #4
   d415e:	f000 fee7 	bl	d4f30 <pinMode>
    pinMode(BLUE_LED, OUTPUT);
   d4162:	2101      	movs	r1, #1
   d4164:	2003      	movs	r0, #3
   d4166:	f000 fee3 	bl	d4f30 <pinMode>

    // This registers a function call. When the function "led"
    // is called from the cloud, the ledToggle() function above
    // will be called.
    Particle.function("led", ledToggle);
}
   d416a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d416e:	4a02      	ldr	r2, [pc, #8]	; (d4178 <setup+0x28>)
   d4170:	4902      	ldr	r1, [pc, #8]	; (d417c <setup+0x2c>)
   d4172:	4803      	ldr	r0, [pc, #12]	; (d4180 <setup+0x30>)
   d4174:	f000 b9f3 	b.w	d455e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4178:	000d50f3 	.word	0x000d50f3
   d417c:	000d40ad 	.word	0x000d40ad
   d4180:	000d4533 	.word	0x000d4533

000d4184 <loop>:

void loop()
{
   d4184:	4770      	bx	lr

000d4186 <_GLOBAL__sub_I__Z9ledToggle6String>:
SYSTEM_THREAD(ENABLED);
   d4186:	2100      	movs	r1, #0
   d4188:	2001      	movs	r0, #1
   d418a:	f000 b911 	b.w	d43b0 <system_thread_set_state>
	...

000d4190 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4190:	b508      	push	{r3, lr}
   d4192:	4b02      	ldr	r3, [pc, #8]	; (d419c <os_mutex_recursive_create+0xc>)
   d4194:	681b      	ldr	r3, [r3, #0]
   d4196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4198:	9301      	str	r3, [sp, #4]
   d419a:	bd08      	pop	{r3, pc}
   d419c:	00030248 	.word	0x00030248

000d41a0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d41a0:	b508      	push	{r3, lr}
   d41a2:	4b02      	ldr	r3, [pc, #8]	; (d41ac <os_mutex_recursive_destroy+0xc>)
   d41a4:	681b      	ldr	r3, [r3, #0]
   d41a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d41a8:	9301      	str	r3, [sp, #4]
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	00030248 	.word	0x00030248

000d41b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d41b0:	b508      	push	{r3, lr}
   d41b2:	4b02      	ldr	r3, [pc, #8]	; (d41bc <HAL_RNG_GetRandomNumber+0xc>)
   d41b4:	681b      	ldr	r3, [r3, #0]
   d41b6:	685b      	ldr	r3, [r3, #4]
   d41b8:	9301      	str	r3, [sp, #4]
   d41ba:	bd08      	pop	{r3, pc}
   d41bc:	00030218 	.word	0x00030218

000d41c0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41c0:	b508      	push	{r3, lr}
   d41c2:	4b02      	ldr	r3, [pc, #8]	; (d41cc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d41c4:	681b      	ldr	r3, [r3, #0]
   d41c6:	695b      	ldr	r3, [r3, #20]
   d41c8:	9301      	str	r3, [sp, #4]
   d41ca:	bd08      	pop	{r3, pc}
   d41cc:	00030218 	.word	0x00030218

000d41d0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d41d0:	b508      	push	{r3, lr}
   d41d2:	4b02      	ldr	r3, [pc, #8]	; (d41dc <HAL_Pin_Mode+0xc>)
   d41d4:	681b      	ldr	r3, [r3, #0]
   d41d6:	689b      	ldr	r3, [r3, #8]
   d41d8:	9301      	str	r3, [sp, #4]
   d41da:	bd08      	pop	{r3, pc}
   d41dc:	0003022c 	.word	0x0003022c

000d41e0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d41e0:	b508      	push	{r3, lr}
   d41e2:	4b02      	ldr	r3, [pc, #8]	; (d41ec <HAL_Get_Pin_Mode+0xc>)
   d41e4:	681b      	ldr	r3, [r3, #0]
   d41e6:	68db      	ldr	r3, [r3, #12]
   d41e8:	9301      	str	r3, [sp, #4]
   d41ea:	bd08      	pop	{r3, pc}
   d41ec:	0003022c 	.word	0x0003022c

000d41f0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d41f0:	b508      	push	{r3, lr}
   d41f2:	4b02      	ldr	r3, [pc, #8]	; (d41fc <HAL_GPIO_Write+0xc>)
   d41f4:	681b      	ldr	r3, [r3, #0]
   d41f6:	691b      	ldr	r3, [r3, #16]
   d41f8:	9301      	str	r3, [sp, #4]
   d41fa:	bd08      	pop	{r3, pc}
   d41fc:	0003022c 	.word	0x0003022c

000d4200 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4200:	b508      	push	{r3, lr}
   d4202:	4b02      	ldr	r3, [pc, #8]	; (d420c <hal_i2c_write+0xc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	6a1b      	ldr	r3, [r3, #32]
   d4208:	9301      	str	r3, [sp, #4]
   d420a:	bd08      	pop	{r3, pc}
   d420c:	00030228 	.word	0x00030228

000d4210 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4210:	b508      	push	{r3, lr}
   d4212:	4b02      	ldr	r3, [pc, #8]	; (d421c <hal_i2c_available+0xc>)
   d4214:	681b      	ldr	r3, [r3, #0]
   d4216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4218:	9301      	str	r3, [sp, #4]
   d421a:	bd08      	pop	{r3, pc}
   d421c:	00030228 	.word	0x00030228

000d4220 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4220:	b508      	push	{r3, lr}
   d4222:	4b02      	ldr	r3, [pc, #8]	; (d422c <hal_i2c_read+0xc>)
   d4224:	681b      	ldr	r3, [r3, #0]
   d4226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4228:	9301      	str	r3, [sp, #4]
   d422a:	bd08      	pop	{r3, pc}
   d422c:	00030228 	.word	0x00030228

000d4230 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4230:	b508      	push	{r3, lr}
   d4232:	4b02      	ldr	r3, [pc, #8]	; (d423c <hal_i2c_peek+0xc>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4238:	9301      	str	r3, [sp, #4]
   d423a:	bd08      	pop	{r3, pc}
   d423c:	00030228 	.word	0x00030228

000d4240 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4240:	b508      	push	{r3, lr}
   d4242:	4b02      	ldr	r3, [pc, #8]	; (d424c <hal_i2c_flush+0xc>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4248:	9301      	str	r3, [sp, #4]
   d424a:	bd08      	pop	{r3, pc}
   d424c:	00030228 	.word	0x00030228

000d4250 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4250:	b508      	push	{r3, lr}
   d4252:	4b02      	ldr	r3, [pc, #8]	; (d425c <hal_i2c_is_enabled+0xc>)
   d4254:	681b      	ldr	r3, [r3, #0]
   d4256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4258:	9301      	str	r3, [sp, #4]
   d425a:	bd08      	pop	{r3, pc}
   d425c:	00030228 	.word	0x00030228

000d4260 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4260:	b508      	push	{r3, lr}
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <hal_i2c_init+0xc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4268:	9301      	str	r3, [sp, #4]
   d426a:	bd08      	pop	{r3, pc}
   d426c:	00030228 	.word	0x00030228

000d4270 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <inet_inet_ntop+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	695b      	ldr	r3, [r3, #20]
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	00030264 	.word	0x00030264

000d4280 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <netdb_freeaddrinfo+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	689b      	ldr	r3, [r3, #8]
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	00030268 	.word	0x00030268

000d4290 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <netdb_getaddrinfo+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	68db      	ldr	r3, [r3, #12]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	00030268 	.word	0x00030268

000d42a0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <hal_spi_init+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	69db      	ldr	r3, [r3, #28]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	00030230 	.word	0x00030230

000d42b0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <hal_spi_is_enabled+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	6a1b      	ldr	r3, [r3, #32]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	00030230 	.word	0x00030230

000d42c0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <hal_usart_init+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	681b      	ldr	r3, [r3, #0]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	0003023c 	.word	0x0003023c

000d42d0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <hal_usart_write+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	68db      	ldr	r3, [r3, #12]
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	0003023c 	.word	0x0003023c

000d42e0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <hal_usart_available+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	691b      	ldr	r3, [r3, #16]
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	0003023c 	.word	0x0003023c

000d42f0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <hal_usart_read+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	695b      	ldr	r3, [r3, #20]
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	0003023c 	.word	0x0003023c

000d4300 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <hal_usart_peek+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	699b      	ldr	r3, [r3, #24]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	0003023c 	.word	0x0003023c

000d4310 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <hal_usart_flush+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	69db      	ldr	r3, [r3, #28]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	0003023c 	.word	0x0003023c

000d4320 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <hal_usart_is_enabled+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	6a1b      	ldr	r3, [r3, #32]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	0003023c 	.word	0x0003023c

000d4330 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <hal_usart_available_data_for_write+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	0003023c 	.word	0x0003023c

000d4340 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_USB_USART_Init+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	681b      	ldr	r3, [r3, #0]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	0003024c 	.word	0x0003024c

000d4350 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_USB_USART_Available_Data+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	691b      	ldr	r3, [r3, #16]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003024c 	.word	0x0003024c

000d4360 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	695b      	ldr	r3, [r3, #20]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003024c 	.word	0x0003024c

000d4370 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_USB_USART_Receive_Data+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	699b      	ldr	r3, [r3, #24]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003024c 	.word	0x0003024c

000d4380 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_USB_USART_Send_Data+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	69db      	ldr	r3, [r3, #28]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003024c 	.word	0x0003024c

000d4390 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_USB_USART_Flush_Data+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	6a1b      	ldr	r3, [r3, #32]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003024c 	.word	0x0003024c

000d43a0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <set_system_mode+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	685b      	ldr	r3, [r3, #4]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030220 	.word	0x00030220

000d43b0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <system_thread_set_state+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030220 	.word	0x00030220

000d43c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b03      	ldr	r3, [pc, #12]	; (d43d0 <system_ctrl_set_app_request_handler+0x10>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d43ca:	9301      	str	r3, [sp, #4]
   d43cc:	bd08      	pop	{r3, pc}
   d43ce:	0000      	.short	0x0000
   d43d0:	00030220 	.word	0x00030220

000d43d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b03      	ldr	r3, [pc, #12]	; (d43e4 <system_ctrl_set_result+0x10>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d43de:	9301      	str	r3, [sp, #4]
   d43e0:	bd08      	pop	{r3, pc}
   d43e2:	0000      	.short	0x0000
   d43e4:	00030220 	.word	0x00030220

000d43e8 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <spark_function+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	685b      	ldr	r3, [r3, #4]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	00030244 	.word	0x00030244

000d43f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <spark_set_random_seed_from_cloud_handler+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030244 	.word	0x00030244

000d4408 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <network_connect+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	685b      	ldr	r3, [r3, #4]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030240 	.word	0x00030240

000d4418 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <network_connecting+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	689b      	ldr	r3, [r3, #8]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030240 	.word	0x00030240

000d4428 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <network_disconnect+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	68db      	ldr	r3, [r3, #12]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030240 	.word	0x00030240

000d4438 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <network_ready+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	691b      	ldr	r3, [r3, #16]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030240 	.word	0x00030240

000d4448 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <network_on+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	695b      	ldr	r3, [r3, #20]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030240 	.word	0x00030240

000d4458 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <network_off+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	699b      	ldr	r3, [r3, #24]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030240 	.word	0x00030240

000d4468 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <network_listen+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	69db      	ldr	r3, [r3, #28]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030240 	.word	0x00030240

000d4478 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <network_listening+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	6a1b      	ldr	r3, [r3, #32]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030240 	.word	0x00030240

000d4488 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <network_set_listen_timeout+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030240 	.word	0x00030240

000d4498 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <network_get_listen_timeout+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030240 	.word	0x00030240

000d44a8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <malloc+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	681b      	ldr	r3, [r3, #0]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	0003021c 	.word	0x0003021c

000d44b8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <free+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	685b      	ldr	r3, [r3, #4]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	0003021c 	.word	0x0003021c

000d44c8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <realloc+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	689b      	ldr	r3, [r3, #8]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	0003021c 	.word	0x0003021c

000d44d8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <newlib_impure_ptr_callback+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	0003021c 	.word	0x0003021c

000d44e8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d44e8:	b510      	push	{r4, lr}
   d44ea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d44ec:	6800      	ldr	r0, [r0, #0]
   d44ee:	b108      	cbz	r0, d44f4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d44f0:	f7ff fe56 	bl	d41a0 <os_mutex_recursive_destroy>
    }
   d44f4:	4620      	mov	r0, r4
   d44f6:	bd10      	pop	{r4, pc}

000d44f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d44f8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d44fa:	4c06      	ldr	r4, [pc, #24]	; (d4514 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d44fc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d44fe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4500:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4502:	f7ff fe45 	bl	d4190 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4506:	4620      	mov	r0, r4
   d4508:	4a03      	ldr	r2, [pc, #12]	; (d4518 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d450a:	4904      	ldr	r1, [pc, #16]	; (d451c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d450c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4510:	f000 bd78 	b.w	d5004 <__aeabi_atexit>
   d4514:	2003e644 	.word	0x2003e644
   d4518:	2003e640 	.word	0x2003e640
   d451c:	000d44e9 	.word	0x000d44e9

000d4520 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4520:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4522:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4524:	4604      	mov	r4, r0
      if (_M_manager)
   d4526:	b113      	cbz	r3, d452e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4528:	2203      	movs	r2, #3
   d452a:	4601      	mov	r1, r0
   d452c:	4798      	blx	r3
    }
   d452e:	4620      	mov	r0, r4
   d4530:	bd10      	pop	{r4, pc}

000d4532 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4532:	b510      	push	{r4, lr}
   d4534:	b088      	sub	sp, #32
   d4536:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4538:	4668      	mov	r0, sp
   d453a:	f000 fa72 	bl	d4a22 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d453e:	4669      	mov	r1, sp
   d4540:	a804      	add	r0, sp, #16
   d4542:	f000 fa91 	bl	d4a68 <_ZN6StringC1ERKS_>
   d4546:	a804      	add	r0, sp, #16
   d4548:	47a0      	blx	r4
   d454a:	4604      	mov	r4, r0
   d454c:	a804      	add	r0, sp, #16
   d454e:	f000 fa1d 	bl	d498c <_ZN6StringD1Ev>
    String p(param);
   d4552:	4668      	mov	r0, sp
   d4554:	f000 fa1a 	bl	d498c <_ZN6StringD1Ev>
}
   d4558:	4620      	mov	r0, r4
   d455a:	b008      	add	sp, #32
   d455c:	bd10      	pop	{r4, pc}

000d455e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d455e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4560:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d4562:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d4566:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d4568:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d456a:	461a      	mov	r2, r3
   d456c:	4669      	mov	r1, sp
   d456e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d4570:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d4574:	f8ad 4000 	strh.w	r4, [sp]
   d4578:	f7ff ff36 	bl	d43e8 <spark_function>
}
   d457c:	b004      	add	sp, #16
   d457e:	bd10      	pop	{r4, pc}

000d4580 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4580:	2200      	movs	r2, #0
   d4582:	6840      	ldr	r0, [r0, #4]
   d4584:	4611      	mov	r1, r2
   d4586:	f7ff bf77 	b.w	d4478 <network_listening>

000d458a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d458a:	2200      	movs	r2, #0
   d458c:	6840      	ldr	r0, [r0, #4]
   d458e:	4611      	mov	r1, r2
   d4590:	f7ff bf82 	b.w	d4498 <network_get_listen_timeout>

000d4594 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4594:	6840      	ldr	r0, [r0, #4]
   d4596:	2200      	movs	r2, #0
   d4598:	f7ff bf76 	b.w	d4488 <network_set_listen_timeout>

000d459c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d459c:	6840      	ldr	r0, [r0, #4]
   d459e:	2200      	movs	r2, #0
   d45a0:	f081 0101 	eor.w	r1, r1, #1
   d45a4:	f7ff bf60 	b.w	d4468 <network_listen>

000d45a8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d45a8:	2300      	movs	r3, #0
   d45aa:	6840      	ldr	r0, [r0, #4]
   d45ac:	461a      	mov	r2, r3
   d45ae:	4619      	mov	r1, r3
   d45b0:	f7ff bf52 	b.w	d4458 <network_off>

000d45b4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d45b4:	2300      	movs	r3, #0
   d45b6:	6840      	ldr	r0, [r0, #4]
   d45b8:	461a      	mov	r2, r3
   d45ba:	4619      	mov	r1, r3
   d45bc:	f7ff bf44 	b.w	d4448 <network_on>

000d45c0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d45c0:	2200      	movs	r2, #0
   d45c2:	6840      	ldr	r0, [r0, #4]
   d45c4:	4611      	mov	r1, r2
   d45c6:	f7ff bf37 	b.w	d4438 <network_ready>

000d45ca <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d45ca:	2200      	movs	r2, #0
   d45cc:	6840      	ldr	r0, [r0, #4]
   d45ce:	4611      	mov	r1, r2
   d45d0:	f7ff bf22 	b.w	d4418 <network_connecting>

000d45d4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d45d4:	6840      	ldr	r0, [r0, #4]
   d45d6:	2200      	movs	r2, #0
   d45d8:	2102      	movs	r1, #2
   d45da:	f7ff bf25 	b.w	d4428 <network_disconnect>

000d45de <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d45de:	2300      	movs	r3, #0
   d45e0:	6840      	ldr	r0, [r0, #4]
   d45e2:	461a      	mov	r2, r3
   d45e4:	f7ff bf10 	b.w	d4408 <network_connect>

000d45e8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d45e8:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d45ea:	2203      	movs	r2, #3
   d45ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d45ee:	4a02      	ldr	r2, [pc, #8]	; (d45f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d45f0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d45f2:	4770      	bx	lr
   d45f4:	2003e648 	.word	0x2003e648
   d45f8:	000d5100 	.word	0x000d5100

000d45fc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d45fc:	4770      	bx	lr

000d45fe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d45fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4600:	4606      	mov	r6, r0
   d4602:	4615      	mov	r5, r2
   d4604:	460c      	mov	r4, r1
   d4606:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4608:	42bc      	cmp	r4, r7
   d460a:	d006      	beq.n	d461a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d460c:	6833      	ldr	r3, [r6, #0]
   d460e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4612:	689b      	ldr	r3, [r3, #8]
   d4614:	4630      	mov	r0, r6
   d4616:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4618:	e7f6      	b.n	d4608 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d461a:	4628      	mov	r0, r5
   d461c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d461e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d461e:	7c00      	ldrb	r0, [r0, #16]
   d4620:	2200      	movs	r2, #0
   d4622:	f7ff bded 	b.w	d4200 <hal_i2c_write>

000d4626 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4626:	7c00      	ldrb	r0, [r0, #16]
   d4628:	2100      	movs	r1, #0
   d462a:	f7ff bdf1 	b.w	d4210 <hal_i2c_available>

000d462e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d462e:	7c00      	ldrb	r0, [r0, #16]
   d4630:	2100      	movs	r1, #0
   d4632:	f7ff bdf5 	b.w	d4220 <hal_i2c_read>

000d4636 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4636:	7c00      	ldrb	r0, [r0, #16]
   d4638:	2100      	movs	r1, #0
   d463a:	f7ff bdf9 	b.w	d4230 <hal_i2c_peek>

000d463e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d463e:	7c00      	ldrb	r0, [r0, #16]
   d4640:	2100      	movs	r1, #0
   d4642:	f7ff bdfd 	b.w	d4240 <hal_i2c_flush>

000d4646 <_ZN7TwoWireD0Ev>:
   d4646:	b510      	push	{r4, lr}
   d4648:	2114      	movs	r1, #20
   d464a:	4604      	mov	r4, r0
   d464c:	f000 fcdf 	bl	d500e <_ZdlPvj>
   d4650:	4620      	mov	r0, r4
   d4652:	bd10      	pop	{r4, pc}

000d4654 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4654:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d465a:	4604      	mov	r4, r0
   d465c:	4608      	mov	r0, r1
   d465e:	2100      	movs	r1, #0
   d4660:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4664:	4b03      	ldr	r3, [pc, #12]	; (d4674 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4666:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4668:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d466a:	4611      	mov	r1, r2
   d466c:	f7ff fdf8 	bl	d4260 <hal_i2c_init>
}
   d4670:	4620      	mov	r0, r4
   d4672:	bd10      	pop	{r4, pc}
   d4674:	000d5134 	.word	0x000d5134

000d4678 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4678:	4770      	bx	lr

000d467a <_ZN9IPAddressD0Ev>:
   d467a:	b510      	push	{r4, lr}
   d467c:	2118      	movs	r1, #24
   d467e:	4604      	mov	r4, r0
   d4680:	f000 fcc5 	bl	d500e <_ZdlPvj>
   d4684:	4620      	mov	r0, r4
   d4686:	bd10      	pop	{r4, pc}

000d4688 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4688:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d468a:	7d03      	ldrb	r3, [r0, #20]
   d468c:	2b06      	cmp	r3, #6
{
   d468e:	b08d      	sub	sp, #52	; 0x34
   d4690:	460e      	mov	r6, r1
   d4692:	f100 0704 	add.w	r7, r0, #4
   d4696:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d469a:	d012      	beq.n	d46c2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d469c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d46a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d46a4:	220a      	movs	r2, #10
   d46a6:	4630      	mov	r0, r6
   d46a8:	f000 f933 	bl	d4912 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d46ac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d46ae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d46b0:	d019      	beq.n	d46e6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d46b2:	2c00      	cmp	r4, #0
   d46b4:	d0f4      	beq.n	d46a0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d46b6:	212e      	movs	r1, #46	; 0x2e
   d46b8:	4630      	mov	r0, r6
   d46ba:	f000 f927 	bl	d490c <_ZN5Print5printEc>
   d46be:	4404      	add	r4, r0
   d46c0:	e7ee      	b.n	d46a0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d46c2:	232f      	movs	r3, #47	; 0x2f
   d46c4:	466a      	mov	r2, sp
   d46c6:	4639      	mov	r1, r7
   d46c8:	200a      	movs	r0, #10
		buf[0] = 0;
   d46ca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d46ce:	f7ff fdcf 	bl	d4270 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d46d2:	4668      	mov	r0, sp
   d46d4:	f000 fcf2 	bl	d50bc <strlen>
   d46d8:	6833      	ldr	r3, [r6, #0]
   d46da:	4602      	mov	r2, r0
   d46dc:	68db      	ldr	r3, [r3, #12]
   d46de:	4669      	mov	r1, sp
   d46e0:	4630      	mov	r0, r6
   d46e2:	4798      	blx	r3
   d46e4:	4604      	mov	r4, r0
    }
    return n;
}
   d46e6:	4620      	mov	r0, r4
   d46e8:	b00d      	add	sp, #52	; 0x34
   d46ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d46ec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d46ec:	b510      	push	{r4, lr}
   d46ee:	4b05      	ldr	r3, [pc, #20]	; (d4704 <_ZN9IPAddressC1Ev+0x18>)
   d46f0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d46f2:	2211      	movs	r2, #17
   d46f4:	f840 3b04 	str.w	r3, [r0], #4
   d46f8:	2100      	movs	r1, #0
   d46fa:	f000 fca9 	bl	d5050 <memset>
}
   d46fe:	4620      	mov	r0, r4
   d4700:	bd10      	pop	{r4, pc}
   d4702:	bf00      	nop
   d4704:	000d515c 	.word	0x000d515c

000d4708 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4708:	4603      	mov	r3, r0
   d470a:	4a07      	ldr	r2, [pc, #28]	; (d4728 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d470c:	b510      	push	{r4, lr}
   d470e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4712:	f101 0210 	add.w	r2, r1, #16
   d4716:	f851 4b04 	ldr.w	r4, [r1], #4
   d471a:	f843 4b04 	str.w	r4, [r3], #4
   d471e:	4291      	cmp	r1, r2
   d4720:	d1f9      	bne.n	d4716 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4722:	780a      	ldrb	r2, [r1, #0]
   d4724:	701a      	strb	r2, [r3, #0]
}
   d4726:	bd10      	pop	{r4, pc}
   d4728:	000d515c 	.word	0x000d515c

000d472c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d472c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d472e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4732:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4736:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d473a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d473e:	2304      	movs	r3, #4
   d4740:	6041      	str	r1, [r0, #4]
   d4742:	7503      	strb	r3, [r0, #20]
}
   d4744:	bd10      	pop	{r4, pc}

000d4746 <_ZN9IPAddressaSEPKh>:
{
   d4746:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4748:	78cb      	ldrb	r3, [r1, #3]
   d474a:	9300      	str	r3, [sp, #0]
   d474c:	788b      	ldrb	r3, [r1, #2]
   d474e:	784a      	ldrb	r2, [r1, #1]
   d4750:	7809      	ldrb	r1, [r1, #0]
   d4752:	f7ff ffeb 	bl	d472c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4756:	b002      	add	sp, #8
   d4758:	bd10      	pop	{r4, pc}
	...

000d475c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d475c:	4b01      	ldr	r3, [pc, #4]	; (d4764 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d475e:	4a02      	ldr	r2, [pc, #8]	; (d4768 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4760:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4762:	4770      	bx	lr
   d4764:	2003e650 	.word	0x2003e650
   d4768:	000d5168 	.word	0x000d5168

000d476c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d476c:	2300      	movs	r3, #0
   d476e:	6840      	ldr	r0, [r0, #4]
   d4770:	461a      	mov	r2, r3
   d4772:	f7ff be49 	b.w	d4408 <network_connect>

000d4776 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4776:	6840      	ldr	r0, [r0, #4]
   d4778:	2200      	movs	r2, #0
   d477a:	2102      	movs	r1, #2
   d477c:	f7ff be54 	b.w	d4428 <network_disconnect>

000d4780 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4780:	2200      	movs	r2, #0
   d4782:	6840      	ldr	r0, [r0, #4]
   d4784:	4611      	mov	r1, r2
   d4786:	f7ff be47 	b.w	d4418 <network_connecting>

000d478a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d478a:	2200      	movs	r2, #0
   d478c:	6840      	ldr	r0, [r0, #4]
   d478e:	4611      	mov	r1, r2
   d4790:	f7ff be52 	b.w	d4438 <network_ready>

000d4794 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4794:	2300      	movs	r3, #0
   d4796:	6840      	ldr	r0, [r0, #4]
   d4798:	461a      	mov	r2, r3
   d479a:	4619      	mov	r1, r3
   d479c:	f7ff be54 	b.w	d4448 <network_on>

000d47a0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d47a0:	2300      	movs	r3, #0
   d47a2:	6840      	ldr	r0, [r0, #4]
   d47a4:	461a      	mov	r2, r3
   d47a6:	4619      	mov	r1, r3
   d47a8:	f7ff be56 	b.w	d4458 <network_off>

000d47ac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d47ac:	6840      	ldr	r0, [r0, #4]
   d47ae:	2200      	movs	r2, #0
   d47b0:	f081 0101 	eor.w	r1, r1, #1
   d47b4:	f7ff be58 	b.w	d4468 <network_listen>

000d47b8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d47b8:	6840      	ldr	r0, [r0, #4]
   d47ba:	2200      	movs	r2, #0
   d47bc:	f7ff be64 	b.w	d4488 <network_set_listen_timeout>

000d47c0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d47c0:	2200      	movs	r2, #0
   d47c2:	6840      	ldr	r0, [r0, #4]
   d47c4:	4611      	mov	r1, r2
   d47c6:	f7ff be67 	b.w	d4498 <network_get_listen_timeout>

000d47ca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d47ca:	2200      	movs	r2, #0
   d47cc:	6840      	ldr	r0, [r0, #4]
   d47ce:	4611      	mov	r1, r2
   d47d0:	f7ff be52 	b.w	d4478 <network_listening>

000d47d4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d47d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d47d8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d47da:	b095      	sub	sp, #84	; 0x54
   d47dc:	4616      	mov	r6, r2
   d47de:	460d      	mov	r5, r1
   d47e0:	4607      	mov	r7, r0
    IPAddress addr;
   d47e2:	f7ff ff83 	bl	d46ec <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d47e6:	4621      	mov	r1, r4
   d47e8:	2218      	movs	r2, #24
   d47ea:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d47ec:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d47ee:	f000 fc2f 	bl	d5050 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d47f2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d47f4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d47f8:	4621      	mov	r1, r4
   d47fa:	466b      	mov	r3, sp
   d47fc:	aa0c      	add	r2, sp, #48	; 0x30
   d47fe:	4630      	mov	r0, r6
   d4800:	f7ff fd46 	bl	d4290 <netdb_getaddrinfo>
    if (!r) {
   d4804:	4604      	mov	r4, r0
   d4806:	2800      	cmp	r0, #0
   d4808:	d146      	bne.n	d4898 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d480a:	4602      	mov	r2, r0
   d480c:	2101      	movs	r1, #1
   d480e:	6868      	ldr	r0, [r5, #4]
   d4810:	f7ff fe12 	bl	d4438 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4814:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4816:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4818:	4622      	mov	r2, r4
   d481a:	6868      	ldr	r0, [r5, #4]
   d481c:	f7ff fe0c 	bl	d4438 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4820:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4822:	4681      	mov	r9, r0
        bool ok = false;
   d4824:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4826:	2e00      	cmp	r6, #0
   d4828:	d036      	beq.n	d4898 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d482a:	2900      	cmp	r1, #0
   d482c:	d134      	bne.n	d4898 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d482e:	6873      	ldr	r3, [r6, #4]
   d4830:	2b02      	cmp	r3, #2
   d4832:	d003      	beq.n	d483c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4834:	2b0a      	cmp	r3, #10
   d4836:	d00b      	beq.n	d4850 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4838:	69f6      	ldr	r6, [r6, #28]
   d483a:	e7f4      	b.n	d4826 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d483c:	f1b8 0f00 	cmp.w	r8, #0
   d4840:	d004      	beq.n	d484c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4842:	6971      	ldr	r1, [r6, #20]
   d4844:	4638      	mov	r0, r7
   d4846:	3104      	adds	r1, #4
   d4848:	f7ff ff7d 	bl	d4746 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d484c:	4641      	mov	r1, r8
   d484e:	e7f3      	b.n	d4838 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4850:	f1b9 0f00 	cmp.w	r9, #0
   d4854:	d101      	bne.n	d485a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4856:	4649      	mov	r1, r9
   d4858:	e7ee      	b.n	d4838 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d485a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d485c:	2210      	movs	r2, #16
   d485e:	a801      	add	r0, sp, #4
   d4860:	f000 fbf6 	bl	d5050 <memset>
                    a.v = 6;
   d4864:	2306      	movs	r3, #6
   d4866:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d486a:	ad01      	add	r5, sp, #4
   d486c:	f104 0308 	add.w	r3, r4, #8
   d4870:	3418      	adds	r4, #24
   d4872:	6818      	ldr	r0, [r3, #0]
   d4874:	6859      	ldr	r1, [r3, #4]
   d4876:	462a      	mov	r2, r5
   d4878:	c203      	stmia	r2!, {r0, r1}
   d487a:	3308      	adds	r3, #8
   d487c:	42a3      	cmp	r3, r4
   d487e:	4615      	mov	r5, r2
   d4880:	d1f7      	bne.n	d4872 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4882:	a901      	add	r1, sp, #4
   d4884:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4886:	ad07      	add	r5, sp, #28
   d4888:	f7ff ff3e 	bl	d4708 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d488c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d488e:	1d3c      	adds	r4, r7, #4
   d4890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4892:	682b      	ldr	r3, [r5, #0]
   d4894:	7023      	strb	r3, [r4, #0]
   d4896:	e7de      	b.n	d4856 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4898:	9800      	ldr	r0, [sp, #0]
   d489a:	f7ff fcf1 	bl	d4280 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d489e:	4638      	mov	r0, r7
   d48a0:	b015      	add	sp, #84	; 0x54
   d48a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d48a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d48a8:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d48aa:	4a03      	ldr	r2, [pc, #12]	; (d48b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d48ac:	601a      	str	r2, [r3, #0]
   d48ae:	2200      	movs	r2, #0
   d48b0:	605a      	str	r2, [r3, #4]

} // spark
   d48b2:	4770      	bx	lr
   d48b4:	2003e654 	.word	0x2003e654
   d48b8:	000d5174 	.word	0x000d5174

000d48bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d48bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d48be:	4606      	mov	r6, r0
   d48c0:	460d      	mov	r5, r1
  size_t n = 0;
   d48c2:	188f      	adds	r7, r1, r2
   d48c4:	2400      	movs	r4, #0
  while (size--) {
   d48c6:	42bd      	cmp	r5, r7
   d48c8:	d00c      	beq.n	d48e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d48ca:	6833      	ldr	r3, [r6, #0]
   d48cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d48d0:	689b      	ldr	r3, [r3, #8]
   d48d2:	4630      	mov	r0, r6
   d48d4:	4798      	blx	r3
     if (chunk>=0)
   d48d6:	1e03      	subs	r3, r0, #0
   d48d8:	db01      	blt.n	d48de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d48da:	441c      	add	r4, r3
  while (size--) {
   d48dc:	e7f3      	b.n	d48c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d48de:	2c00      	cmp	r4, #0
   d48e0:	bf08      	it	eq
   d48e2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d48e4:	4620      	mov	r0, r4
   d48e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d48e8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d48e8:	b513      	push	{r0, r1, r4, lr}
   d48ea:	4604      	mov	r4, r0
    }
   d48ec:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d48ee:	b159      	cbz	r1, d4908 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d48f0:	9101      	str	r1, [sp, #4]
   d48f2:	f000 fbe3 	bl	d50bc <strlen>
   d48f6:	6823      	ldr	r3, [r4, #0]
   d48f8:	9901      	ldr	r1, [sp, #4]
   d48fa:	68db      	ldr	r3, [r3, #12]
   d48fc:	4602      	mov	r2, r0
   d48fe:	4620      	mov	r0, r4
    }
   d4900:	b002      	add	sp, #8
   d4902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4906:	4718      	bx	r3
    }
   d4908:	b002      	add	sp, #8
   d490a:	bd10      	pop	{r4, pc}

000d490c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d490c:	6803      	ldr	r3, [r0, #0]
   d490e:	689b      	ldr	r3, [r3, #8]
   d4910:	4718      	bx	r3

000d4912 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4912:	b530      	push	{r4, r5, lr}
   d4914:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4916:	2300      	movs	r3, #0
   d4918:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d491c:	2a01      	cmp	r2, #1
   d491e:	bf98      	it	ls
   d4920:	220a      	movls	r2, #10
   d4922:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4924:	460d      	mov	r5, r1
   d4926:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d492a:	fb01 5312 	mls	r3, r1, r2, r5
   d492e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4932:	2b09      	cmp	r3, #9
   d4934:	bf94      	ite	ls
   d4936:	3330      	addls	r3, #48	; 0x30
   d4938:	3337      	addhi	r3, #55	; 0x37
   d493a:	b2db      	uxtb	r3, r3
  } while(n);
   d493c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d493e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4942:	d9ef      	bls.n	d4924 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4944:	4621      	mov	r1, r4
   d4946:	f7ff ffcf 	bl	d48e8 <_ZN5Print5writeEPKc>
}
   d494a:	b00b      	add	sp, #44	; 0x2c
   d494c:	bd30      	pop	{r4, r5, pc}

000d494e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d494e:	b510      	push	{r4, lr}
   d4950:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4952:	f7ff fde5 	bl	d4520 <_ZNSt14_Function_baseD1Ev>
   d4956:	4620      	mov	r0, r4
   d4958:	bd10      	pop	{r4, pc}
	...

000d495c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d495c:	4803      	ldr	r0, [pc, #12]	; (d496c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d495e:	4a04      	ldr	r2, [pc, #16]	; (d4970 <_GLOBAL__sub_I_RGB+0x14>)
   d4960:	4904      	ldr	r1, [pc, #16]	; (d4974 <_GLOBAL__sub_I_RGB+0x18>)
   d4962:	2300      	movs	r3, #0
   d4964:	6083      	str	r3, [r0, #8]
   d4966:	f000 bb4d 	b.w	d5004 <__aeabi_atexit>
   d496a:	bf00      	nop
   d496c:	2003e65c 	.word	0x2003e65c
   d4970:	2003e640 	.word	0x2003e640
   d4974:	000d494f 	.word	0x000d494f

000d4978 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4978:	b510      	push	{r4, lr}
   d497a:	4604      	mov	r4, r0
   d497c:	4608      	mov	r0, r1
{
    _spi = spi;
   d497e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4980:	f7ff fc8e 	bl	d42a0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4984:	2300      	movs	r3, #0
   d4986:	6063      	str	r3, [r4, #4]
}
   d4988:	4620      	mov	r0, r4
   d498a:	bd10      	pop	{r4, pc}

000d498c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d498c:	b510      	push	{r4, lr}
   d498e:	4604      	mov	r4, r0
{
	free(buffer);
   d4990:	6800      	ldr	r0, [r0, #0]
   d4992:	f7ff fd91 	bl	d44b8 <free>
}
   d4996:	4620      	mov	r0, r4
   d4998:	bd10      	pop	{r4, pc}

000d499a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d499a:	b510      	push	{r4, lr}
   d499c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d499e:	6800      	ldr	r0, [r0, #0]
   d49a0:	b108      	cbz	r0, d49a6 <_ZN6String10invalidateEv+0xc>
   d49a2:	f7ff fd89 	bl	d44b8 <free>
	buffer = NULL;
   d49a6:	2300      	movs	r3, #0
	capacity = len = 0;
   d49a8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d49ac:	6023      	str	r3, [r4, #0]
}
   d49ae:	bd10      	pop	{r4, pc}

000d49b0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d49b0:	b538      	push	{r3, r4, r5, lr}
   d49b2:	4604      	mov	r4, r0
   d49b4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d49b6:	6800      	ldr	r0, [r0, #0]
   d49b8:	3101      	adds	r1, #1
   d49ba:	f7ff fd85 	bl	d44c8 <realloc>
	if (newbuffer) {
   d49be:	b110      	cbz	r0, d49c6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d49c0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d49c4:	2001      	movs	r0, #1
	}
	return 0;
}
   d49c6:	bd38      	pop	{r3, r4, r5, pc}

000d49c8 <_ZN6String7reserveEj>:
{
   d49c8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d49ca:	6803      	ldr	r3, [r0, #0]
{
   d49cc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d49ce:	b123      	cbz	r3, d49da <_ZN6String7reserveEj+0x12>
   d49d0:	6843      	ldr	r3, [r0, #4]
   d49d2:	428b      	cmp	r3, r1
   d49d4:	d301      	bcc.n	d49da <_ZN6String7reserveEj+0x12>
   d49d6:	2001      	movs	r0, #1
}
   d49d8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d49da:	4620      	mov	r0, r4
   d49dc:	f7ff ffe8 	bl	d49b0 <_ZN6String12changeBufferEj>
   d49e0:	2800      	cmp	r0, #0
   d49e2:	d0f9      	beq.n	d49d8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d49e4:	68a3      	ldr	r3, [r4, #8]
   d49e6:	2b00      	cmp	r3, #0
   d49e8:	d1f5      	bne.n	d49d6 <_ZN6String7reserveEj+0xe>
   d49ea:	6822      	ldr	r2, [r4, #0]
   d49ec:	7013      	strb	r3, [r2, #0]
   d49ee:	e7f2      	b.n	d49d6 <_ZN6String7reserveEj+0xe>

000d49f0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d49f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d49f2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d49f4:	4611      	mov	r1, r2
   d49f6:	9201      	str	r2, [sp, #4]
{
   d49f8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d49fa:	f7ff ffe5 	bl	d49c8 <_ZN6String7reserveEj>
   d49fe:	9a01      	ldr	r2, [sp, #4]
   d4a00:	b928      	cbnz	r0, d4a0e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4a02:	4620      	mov	r0, r4
   d4a04:	f7ff ffc9 	bl	d499a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4a08:	4620      	mov	r0, r4
   d4a0a:	b003      	add	sp, #12
   d4a0c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4a0e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4a10:	4629      	mov	r1, r5
   d4a12:	6820      	ldr	r0, [r4, #0]
   d4a14:	f000 fb0e 	bl	d5034 <memcpy>
	buffer[len] = 0;
   d4a18:	6822      	ldr	r2, [r4, #0]
   d4a1a:	68a3      	ldr	r3, [r4, #8]
   d4a1c:	2100      	movs	r1, #0
   d4a1e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4a20:	e7f2      	b.n	d4a08 <_ZN6String4copyEPKcj+0x18>

000d4a22 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4a22:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4a24:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4a26:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4a2a:	4604      	mov	r4, r0
	len = 0;
   d4a2c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a2e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4a30:	b141      	cbz	r1, d4a44 <_ZN6StringC1EPKc+0x22>
   d4a32:	4608      	mov	r0, r1
   d4a34:	9101      	str	r1, [sp, #4]
   d4a36:	f000 fb41 	bl	d50bc <strlen>
   d4a3a:	9901      	ldr	r1, [sp, #4]
   d4a3c:	4602      	mov	r2, r0
   d4a3e:	4620      	mov	r0, r4
   d4a40:	f7ff ffd6 	bl	d49f0 <_ZN6String4copyEPKcj>
}
   d4a44:	4620      	mov	r0, r4
   d4a46:	b002      	add	sp, #8
   d4a48:	bd10      	pop	{r4, pc}

000d4a4a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4a4a:	4288      	cmp	r0, r1
{
   d4a4c:	b510      	push	{r4, lr}
   d4a4e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4a50:	d005      	beq.n	d4a5e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4a52:	680b      	ldr	r3, [r1, #0]
   d4a54:	b12b      	cbz	r3, d4a62 <_ZN6StringaSERKS_+0x18>
   d4a56:	688a      	ldr	r2, [r1, #8]
   d4a58:	4619      	mov	r1, r3
   d4a5a:	f7ff ffc9 	bl	d49f0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4a5e:	4620      	mov	r0, r4
   d4a60:	bd10      	pop	{r4, pc}
	else invalidate();
   d4a62:	f7ff ff9a 	bl	d499a <_ZN6String10invalidateEv>
   d4a66:	e7fa      	b.n	d4a5e <_ZN6StringaSERKS_+0x14>

000d4a68 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4a68:	b510      	push	{r4, lr}
	buffer = NULL;
   d4a6a:	2300      	movs	r3, #0
String::String(const String &value)
   d4a6c:	4604      	mov	r4, r0
	capacity = 0;
   d4a6e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4a72:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a74:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4a76:	f7ff ffe8 	bl	d4a4a <_ZN6StringaSERKS_>
}
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	bd10      	pop	{r4, pc}

000d4a7e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4a7e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4a80:	6882      	ldr	r2, [r0, #8]
   d4a82:	b93a      	cbnz	r2, d4a94 <_ZNK6String6equalsEPKc+0x16>
   d4a84:	b121      	cbz	r1, d4a90 <_ZNK6String6equalsEPKc+0x12>
   d4a86:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d4a88:	fab0 f080 	clz	r0, r0
   d4a8c:	0940      	lsrs	r0, r0, #5
   d4a8e:	e000      	b.n	d4a92 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4a90:	2001      	movs	r0, #1
}
   d4a92:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4a94:	6800      	ldr	r0, [r0, #0]
   d4a96:	b909      	cbnz	r1, d4a9c <_ZNK6String6equalsEPKc+0x1e>
   d4a98:	7800      	ldrb	r0, [r0, #0]
   d4a9a:	e7f5      	b.n	d4a88 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d4a9c:	f000 fb04 	bl	d50a8 <strcmp>
   d4aa0:	e7f2      	b.n	d4a88 <_ZNK6String6equalsEPKc+0xa>

000d4aa2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4aa2:	b510      	push	{r4, lr}
   d4aa4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4aa6:	6800      	ldr	r0, [r0, #0]
   d4aa8:	b118      	cbz	r0, d4ab2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4aaa:	f7ff fd05 	bl	d44b8 <free>
            wakeupSource_ = nullptr;
   d4aae:	2300      	movs	r3, #0
   d4ab0:	6023      	str	r3, [r4, #0]
        }
    }
   d4ab2:	bd10      	pop	{r4, pc}

000d4ab4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4ab4:	b510      	push	{r4, lr}
   d4ab6:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4ab8:	f7ff fff3 	bl	d4aa2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4abc:	4620      	mov	r0, r4
   d4abe:	bd10      	pop	{r4, pc}

000d4ac0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4ac0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4ac2:	4b09      	ldr	r3, [pc, #36]	; (d4ae8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4ac4:	4c09      	ldr	r4, [pc, #36]	; (d4aec <_GLOBAL__sub_I_System+0x2c>)
   d4ac6:	2202      	movs	r2, #2
   d4ac8:	2000      	movs	r0, #0
   d4aca:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4acc:	4b08      	ldr	r3, [pc, #32]	; (d4af0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4ace:	6020      	str	r0, [r4, #0]
   d4ad0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4ad2:	71a0      	strb	r0, [r4, #6]
   d4ad4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4ad6:	f7ff fc63 	bl	d43a0 <set_system_mode>
SystemClass System;
   d4ada:	4620      	mov	r0, r4
   d4adc:	4a05      	ldr	r2, [pc, #20]	; (d4af4 <_GLOBAL__sub_I_System+0x34>)
   d4ade:	4906      	ldr	r1, [pc, #24]	; (d4af8 <_GLOBAL__sub_I_System+0x38>)
   d4ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4ae4:	f000 ba8e 	b.w	d5004 <__aeabi_atexit>
   d4ae8:	2003e678 	.word	0x2003e678
   d4aec:	2003e66c 	.word	0x2003e66c
   d4af0:	ffff0000 	.word	0xffff0000
   d4af4:	2003e640 	.word	0x2003e640
   d4af8:	000d4ab5 	.word	0x000d4ab5

000d4afc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4afc:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4afe:	681a      	ldr	r2, [r3, #0]
   d4b00:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4b02:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4b04:	4770      	bx	lr
   d4b06:	bf00      	nop
   d4b08:	2003e5d8 	.word	0x2003e5d8
   d4b0c:	2003e67c 	.word	0x2003e67c

000d4b10 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d4b10:	4770      	bx	lr

000d4b12 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4b12:	7441      	strb	r1, [r0, #17]
}
   d4b14:	4770      	bx	lr

000d4b16 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d4b16:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d4b18:	7c00      	ldrb	r0, [r0, #16]
   d4b1a:	f7ff fc09 	bl	d4330 <hal_usart_available_data_for_write>
}
   d4b1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b22:	bd08      	pop	{r3, pc}

000d4b24 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4b24:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d4b26:	7c00      	ldrb	r0, [r0, #16]
   d4b28:	f7ff fbda 	bl	d42e0 <hal_usart_available>
}
   d4b2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b30:	bd08      	pop	{r3, pc}

000d4b32 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4b32:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d4b34:	7c00      	ldrb	r0, [r0, #16]
   d4b36:	f7ff fbe3 	bl	d4300 <hal_usart_peek>
}
   d4b3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4b3e:	bd08      	pop	{r3, pc}

000d4b40 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4b40:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d4b42:	7c00      	ldrb	r0, [r0, #16]
   d4b44:	f7ff fbd4 	bl	d42f0 <hal_usart_read>
}
   d4b48:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4b4c:	bd08      	pop	{r3, pc}

000d4b4e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d4b4e:	7c00      	ldrb	r0, [r0, #16]
   d4b50:	f7ff bbde 	b.w	d4310 <hal_usart_flush>

000d4b54 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b56:	7c45      	ldrb	r5, [r0, #17]
{
   d4b58:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b5a:	b12d      	cbz	r5, d4b68 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d4b5c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4b5e:	b003      	add	sp, #12
   d4b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d4b64:	f7ff bbb4 	b.w	d42d0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b68:	7c00      	ldrb	r0, [r0, #16]
   d4b6a:	9101      	str	r1, [sp, #4]
   d4b6c:	f7ff fbe0 	bl	d4330 <hal_usart_available_data_for_write>
   d4b70:	2800      	cmp	r0, #0
   d4b72:	9901      	ldr	r1, [sp, #4]
   d4b74:	dcf2      	bgt.n	d4b5c <_ZN11USARTSerial5writeEh+0x8>
}
   d4b76:	4628      	mov	r0, r5
   d4b78:	b003      	add	sp, #12
   d4b7a:	bd30      	pop	{r4, r5, pc}

000d4b7c <_ZN11USARTSerialD0Ev>:
   d4b7c:	b510      	push	{r4, lr}
   d4b7e:	2114      	movs	r1, #20
   d4b80:	4604      	mov	r4, r0
   d4b82:	f000 fa44 	bl	d500e <_ZdlPvj>
   d4b86:	4620      	mov	r0, r4
   d4b88:	bd10      	pop	{r4, pc}
	...

000d4b8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4b8c:	b510      	push	{r4, lr}
   d4b8e:	f04f 0c00 	mov.w	ip, #0
   d4b92:	4604      	mov	r4, r0
   d4b94:	4608      	mov	r0, r1
   d4b96:	4611      	mov	r1, r2
   d4b98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4b9c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4ba0:	4a04      	ldr	r2, [pc, #16]	; (d4bb4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d4ba2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d4ba4:	2201      	movs	r2, #1
  _serial = serial;
   d4ba6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4ba8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4baa:	461a      	mov	r2, r3
   d4bac:	f7ff fb88 	bl	d42c0 <hal_usart_init>
}
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	bd10      	pop	{r4, pc}
   d4bb4:	000d51c4 	.word	0x000d51c4

000d4bb8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4bb8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4bba:	4c0e      	ldr	r4, [pc, #56]	; (d4bf4 <_Z22__fetch_global_Serial1v+0x3c>)
   d4bbc:	7821      	ldrb	r1, [r4, #0]
   d4bbe:	f3bf 8f5b 	dmb	ish
   d4bc2:	f011 0101 	ands.w	r1, r1, #1
   d4bc6:	d112      	bne.n	d4bee <_Z22__fetch_global_Serial1v+0x36>
   d4bc8:	4620      	mov	r0, r4
   d4bca:	9101      	str	r1, [sp, #4]
   d4bcc:	f7ff fa65 	bl	d409a <__cxa_guard_acquire>
   d4bd0:	9901      	ldr	r1, [sp, #4]
   d4bd2:	b160      	cbz	r0, d4bee <_Z22__fetch_global_Serial1v+0x36>
   d4bd4:	4a08      	ldr	r2, [pc, #32]	; (d4bf8 <_Z22__fetch_global_Serial1v+0x40>)
   d4bd6:	4b09      	ldr	r3, [pc, #36]	; (d4bfc <_Z22__fetch_global_Serial1v+0x44>)
   d4bd8:	4809      	ldr	r0, [pc, #36]	; (d4c00 <_Z22__fetch_global_Serial1v+0x48>)
   d4bda:	f7ff ffd7 	bl	d4b8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4bde:	4620      	mov	r0, r4
   d4be0:	f7ff fa60 	bl	d40a4 <__cxa_guard_release>
   d4be4:	4a07      	ldr	r2, [pc, #28]	; (d4c04 <_Z22__fetch_global_Serial1v+0x4c>)
   d4be6:	4908      	ldr	r1, [pc, #32]	; (d4c08 <_Z22__fetch_global_Serial1v+0x50>)
   d4be8:	4805      	ldr	r0, [pc, #20]	; (d4c00 <_Z22__fetch_global_Serial1v+0x48>)
   d4bea:	f000 fa0b 	bl	d5004 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4bee:	4804      	ldr	r0, [pc, #16]	; (d4c00 <_Z22__fetch_global_Serial1v+0x48>)
   d4bf0:	b002      	add	sp, #8
   d4bf2:	bd10      	pop	{r4, pc}
   d4bf4:	2003e680 	.word	0x2003e680
   d4bf8:	2003e684 	.word	0x2003e684
   d4bfc:	2003e708 	.word	0x2003e708
   d4c00:	2003e78c 	.word	0x2003e78c
   d4c04:	2003e640 	.word	0x2003e640
   d4c08:	000d4b11 	.word	0x000d4b11

000d4c0c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4c0c:	7441      	strb	r1, [r0, #17]
}
   d4c0e:	4770      	bx	lr

000d4c10 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4c10:	4770      	bx	lr

000d4c12 <_ZN9USBSerial4readEv>:
{
   d4c12:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4c14:	2100      	movs	r1, #0
   d4c16:	7c00      	ldrb	r0, [r0, #16]
   d4c18:	f7ff fbaa 	bl	d4370 <HAL_USB_USART_Receive_Data>
}
   d4c1c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4c20:	bd08      	pop	{r3, pc}

000d4c22 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d4c22:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4c24:	2101      	movs	r1, #1
   d4c26:	7c00      	ldrb	r0, [r0, #16]
   d4c28:	f7ff fba2 	bl	d4370 <HAL_USB_USART_Receive_Data>
}
   d4c2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4c30:	bd08      	pop	{r3, pc}

000d4c32 <_ZN9USBSerial17availableForWriteEv>:
{
   d4c32:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4c34:	7c00      	ldrb	r0, [r0, #16]
   d4c36:	f7ff fb93 	bl	d4360 <HAL_USB_USART_Available_Data_For_Write>
}
   d4c3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c3e:	bd08      	pop	{r3, pc}

000d4c40 <_ZN9USBSerial9availableEv>:
{
   d4c40:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4c42:	7c00      	ldrb	r0, [r0, #16]
   d4c44:	f7ff fb84 	bl	d4350 <HAL_USB_USART_Available_Data>
}
   d4c48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c4c:	bd08      	pop	{r3, pc}

000d4c4e <_ZN9USBSerial5writeEh>:
{
   d4c4e:	b513      	push	{r0, r1, r4, lr}
   d4c50:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c52:	7c00      	ldrb	r0, [r0, #16]
{
   d4c54:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c56:	f7ff fb83 	bl	d4360 <HAL_USB_USART_Available_Data_For_Write>
   d4c5a:	2800      	cmp	r0, #0
   d4c5c:	9901      	ldr	r1, [sp, #4]
   d4c5e:	dc01      	bgt.n	d4c64 <_ZN9USBSerial5writeEh+0x16>
   d4c60:	7c60      	ldrb	r0, [r4, #17]
   d4c62:	b120      	cbz	r0, d4c6e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4c64:	7c20      	ldrb	r0, [r4, #16]
   d4c66:	f7ff fb8b 	bl	d4380 <HAL_USB_USART_Send_Data>
   d4c6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d4c6e:	b002      	add	sp, #8
   d4c70:	bd10      	pop	{r4, pc}

000d4c72 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d4c72:	7c00      	ldrb	r0, [r0, #16]
   d4c74:	f7ff bb8c 	b.w	d4390 <HAL_USB_USART_Flush_Data>

000d4c78 <_ZN9USBSerialD0Ev>:
   d4c78:	b510      	push	{r4, lr}
   d4c7a:	2114      	movs	r1, #20
   d4c7c:	4604      	mov	r4, r0
   d4c7e:	f000 f9c6 	bl	d500e <_ZdlPvj>
   d4c82:	4620      	mov	r0, r4
   d4c84:	bd10      	pop	{r4, pc}
	...

000d4c88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4c88:	b510      	push	{r4, lr}
   d4c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c8e:	4604      	mov	r4, r0
   d4c90:	4608      	mov	r0, r1
   d4c92:	2100      	movs	r1, #0
   d4c94:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4c98:	4b04      	ldr	r3, [pc, #16]	; (d4cac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4c9a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4c9c:	2301      	movs	r3, #1
  _serial = serial;
   d4c9e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4ca0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4ca2:	4611      	mov	r1, r2
   d4ca4:	f7ff fb4c 	bl	d4340 <HAL_USB_USART_Init>
}
   d4ca8:	4620      	mov	r0, r4
   d4caa:	bd10      	pop	{r4, pc}
   d4cac:	000d51f4 	.word	0x000d51f4

000d4cb0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4cb0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4cb2:	2214      	movs	r2, #20
{
   d4cb4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4cb6:	2100      	movs	r1, #0
   d4cb8:	f000 f9ca 	bl	d5050 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4cbc:	4620      	mov	r0, r4
   d4cbe:	bd10      	pop	{r4, pc}

000d4cc0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4cc0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4cc2:	4c10      	ldr	r4, [pc, #64]	; (d4d04 <_Z16_fetch_usbserialv+0x44>)
{
   d4cc4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4cc6:	a803      	add	r0, sp, #12
   d4cc8:	f7ff fff2 	bl	d4cb0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4ccc:	7821      	ldrb	r1, [r4, #0]
   d4cce:	f3bf 8f5b 	dmb	ish
   d4cd2:	f011 0101 	ands.w	r1, r1, #1
   d4cd6:	d111      	bne.n	d4cfc <_Z16_fetch_usbserialv+0x3c>
   d4cd8:	4620      	mov	r0, r4
   d4cda:	9101      	str	r1, [sp, #4]
   d4cdc:	f7ff f9dd 	bl	d409a <__cxa_guard_acquire>
   d4ce0:	9901      	ldr	r1, [sp, #4]
   d4ce2:	b158      	cbz	r0, d4cfc <_Z16_fetch_usbserialv+0x3c>
   d4ce4:	aa03      	add	r2, sp, #12
   d4ce6:	4808      	ldr	r0, [pc, #32]	; (d4d08 <_Z16_fetch_usbserialv+0x48>)
   d4ce8:	f7ff ffce 	bl	d4c88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4cec:	4620      	mov	r0, r4
   d4cee:	f7ff f9d9 	bl	d40a4 <__cxa_guard_release>
   d4cf2:	4a06      	ldr	r2, [pc, #24]	; (d4d0c <_Z16_fetch_usbserialv+0x4c>)
   d4cf4:	4906      	ldr	r1, [pc, #24]	; (d4d10 <_Z16_fetch_usbserialv+0x50>)
   d4cf6:	4804      	ldr	r0, [pc, #16]	; (d4d08 <_Z16_fetch_usbserialv+0x48>)
   d4cf8:	f000 f984 	bl	d5004 <__aeabi_atexit>
	return _usbserial;
}
   d4cfc:	4802      	ldr	r0, [pc, #8]	; (d4d08 <_Z16_fetch_usbserialv+0x48>)
   d4cfe:	b008      	add	sp, #32
   d4d00:	bd10      	pop	{r4, pc}
   d4d02:	bf00      	nop
   d4d04:	2003e7a0 	.word	0x2003e7a0
   d4d08:	2003e7a4 	.word	0x2003e7a4
   d4d0c:	2003e640 	.word	0x2003e640
   d4d10:	000d4c11 	.word	0x000d4c11

000d4d14 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4d14:	2200      	movs	r2, #0
   d4d16:	6840      	ldr	r0, [r0, #4]
   d4d18:	4611      	mov	r1, r2
   d4d1a:	f7ff bb8d 	b.w	d4438 <network_ready>

000d4d1e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d1e:	2200      	movs	r2, #0
   d4d20:	6840      	ldr	r0, [r0, #4]
   d4d22:	4611      	mov	r1, r2
   d4d24:	f7ff bba8 	b.w	d4478 <network_listening>

000d4d28 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4d28:	2200      	movs	r2, #0
   d4d2a:	6840      	ldr	r0, [r0, #4]
   d4d2c:	4611      	mov	r1, r2
   d4d2e:	f7ff bbb3 	b.w	d4498 <network_get_listen_timeout>

000d4d32 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4d32:	6840      	ldr	r0, [r0, #4]
   d4d34:	2200      	movs	r2, #0
   d4d36:	f7ff bba7 	b.w	d4488 <network_set_listen_timeout>

000d4d3a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d3a:	6840      	ldr	r0, [r0, #4]
   d4d3c:	2200      	movs	r2, #0
   d4d3e:	f081 0101 	eor.w	r1, r1, #1
   d4d42:	f7ff bb91 	b.w	d4468 <network_listen>

000d4d46 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4d46:	2300      	movs	r3, #0
   d4d48:	6840      	ldr	r0, [r0, #4]
   d4d4a:	461a      	mov	r2, r3
   d4d4c:	4619      	mov	r1, r3
   d4d4e:	f7ff bb83 	b.w	d4458 <network_off>

000d4d52 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4d52:	2300      	movs	r3, #0
   d4d54:	6840      	ldr	r0, [r0, #4]
   d4d56:	461a      	mov	r2, r3
   d4d58:	4619      	mov	r1, r3
   d4d5a:	f7ff bb75 	b.w	d4448 <network_on>

000d4d5e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d5e:	2200      	movs	r2, #0
   d4d60:	6840      	ldr	r0, [r0, #4]
   d4d62:	4611      	mov	r1, r2
   d4d64:	f7ff bb58 	b.w	d4418 <network_connecting>

000d4d68 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d68:	6840      	ldr	r0, [r0, #4]
   d4d6a:	2200      	movs	r2, #0
   d4d6c:	2102      	movs	r1, #2
   d4d6e:	f7ff bb5b 	b.w	d4428 <network_disconnect>

000d4d72 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d72:	2300      	movs	r3, #0
   d4d74:	6840      	ldr	r0, [r0, #4]
   d4d76:	461a      	mov	r2, r3
   d4d78:	f7ff bb46 	b.w	d4408 <network_connect>

000d4d7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4d7c:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4d7e:	2204      	movs	r2, #4
   d4d80:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4d82:	4a02      	ldr	r2, [pc, #8]	; (d4d8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4d84:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d4d86:	4770      	bx	lr
   d4d88:	2003e7b8 	.word	0x2003e7b8
   d4d8c:	000d5224 	.word	0x000d5224

000d4d90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4d90:	4b01      	ldr	r3, [pc, #4]	; (d4d98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4d92:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4d94:	4770      	bx	lr
   d4d96:	bf00      	nop
   d4d98:	2003e5dc 	.word	0x2003e5dc

000d4d9c <serialEventRun>:
{
   d4d9c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4d9e:	4b0b      	ldr	r3, [pc, #44]	; (d4dcc <serialEventRun+0x30>)
   d4da0:	b143      	cbz	r3, d4db4 <serialEventRun+0x18>
   d4da2:	f7ff ff8d 	bl	d4cc0 <_Z16_fetch_usbserialv>
   d4da6:	6803      	ldr	r3, [r0, #0]
   d4da8:	691b      	ldr	r3, [r3, #16]
   d4daa:	4798      	blx	r3
   d4dac:	2800      	cmp	r0, #0
   d4dae:	dd01      	ble.n	d4db4 <serialEventRun+0x18>
        serialEvent();
   d4db0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4db4:	4b06      	ldr	r3, [pc, #24]	; (d4dd0 <serialEventRun+0x34>)
   d4db6:	b143      	cbz	r3, d4dca <serialEventRun+0x2e>
   d4db8:	f7ff fefe 	bl	d4bb8 <_Z22__fetch_global_Serial1v>
   d4dbc:	6803      	ldr	r3, [r0, #0]
   d4dbe:	691b      	ldr	r3, [r3, #16]
   d4dc0:	4798      	blx	r3
   d4dc2:	2800      	cmp	r0, #0
   d4dc4:	dd01      	ble.n	d4dca <serialEventRun+0x2e>
        serialEvent1();
   d4dc6:	f3af 8000 	nop.w
}
   d4dca:	bd08      	pop	{r3, pc}
	...

000d4dd4 <_post_loop>:
{
   d4dd4:	b508      	push	{r3, lr}
	serialEventRun();
   d4dd6:	f7ff ffe1 	bl	d4d9c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4dda:	f7ff f9f1 	bl	d41c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4dde:	4b01      	ldr	r3, [pc, #4]	; (d4de4 <_post_loop+0x10>)
   d4de0:	6018      	str	r0, [r3, #0]
}
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	2003e7d4 	.word	0x2003e7d4

000d4de8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4de8:	4802      	ldr	r0, [pc, #8]	; (d4df4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4dea:	4a03      	ldr	r2, [pc, #12]	; (d4df8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4dec:	4903      	ldr	r1, [pc, #12]	; (d4dfc <_Z33system_initialize_user_backup_ramv+0x14>)
   d4dee:	1a12      	subs	r2, r2, r0
   d4df0:	f000 b920 	b.w	d5034 <memcpy>
   d4df4:	2003f400 	.word	0x2003f400
   d4df8:	2003f404 	.word	0x2003f404
   d4dfc:	000d5280 	.word	0x000d5280

000d4e00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4e00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e02:	2300      	movs	r3, #0
   d4e04:	9300      	str	r3, [sp, #0]
   d4e06:	461a      	mov	r2, r3
   d4e08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e0c:	f7ff fae2 	bl	d43d4 <system_ctrl_set_result>
}
   d4e10:	b003      	add	sp, #12
   d4e12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4e18 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4e18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4e1a:	8843      	ldrh	r3, [r0, #2]
   d4e1c:	2b0a      	cmp	r3, #10
   d4e1e:	d008      	beq.n	d4e32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4e20:	2b50      	cmp	r3, #80	; 0x50
   d4e22:	d10b      	bne.n	d4e3c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4e24:	4b09      	ldr	r3, [pc, #36]	; (d4e4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4e26:	681b      	ldr	r3, [r3, #0]
   d4e28:	b14b      	cbz	r3, d4e3e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4e2a:	b003      	add	sp, #12
   d4e2c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4e30:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4e32:	f7ff ffe5 	bl	d4e00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4e36:	b003      	add	sp, #12
   d4e38:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e3c:	2300      	movs	r3, #0
   d4e3e:	9300      	str	r3, [sp, #0]
   d4e40:	461a      	mov	r2, r3
   d4e42:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e46:	f7ff fac5 	bl	d43d4 <system_ctrl_set_result>
}
   d4e4a:	e7f4      	b.n	d4e36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4e4c:	2003e7c4 	.word	0x2003e7c4

000d4e50 <module_user_init_hook>:
{
   d4e50:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e52:	4c12      	ldr	r4, [pc, #72]	; (d4e9c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4e54:	4812      	ldr	r0, [pc, #72]	; (d4ea0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e56:	4d13      	ldr	r5, [pc, #76]	; (d4ea4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4e58:	2100      	movs	r1, #0
   d4e5a:	f7ff fb3d 	bl	d44d8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e5e:	6823      	ldr	r3, [r4, #0]
   d4e60:	42ab      	cmp	r3, r5
   d4e62:	4b11      	ldr	r3, [pc, #68]	; (d4ea8 <module_user_init_hook+0x58>)
   d4e64:	bf0c      	ite	eq
   d4e66:	2201      	moveq	r2, #1
   d4e68:	2200      	movne	r2, #0
   d4e6a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4e6c:	d002      	beq.n	d4e74 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4e6e:	f7ff ffbb 	bl	d4de8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4e72:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4e74:	f7ff f99c 	bl	d41b0 <HAL_RNG_GetRandomNumber>
   d4e78:	4604      	mov	r4, r0
    srand(seed);
   d4e7a:	f000 f8f1 	bl	d5060 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4e7e:	4b0b      	ldr	r3, [pc, #44]	; (d4eac <module_user_init_hook+0x5c>)
   d4e80:	b113      	cbz	r3, d4e88 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4e82:	4620      	mov	r0, r4
   d4e84:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4e88:	2100      	movs	r1, #0
   d4e8a:	4808      	ldr	r0, [pc, #32]	; (d4eac <module_user_init_hook+0x5c>)
   d4e8c:	f7ff fab4 	bl	d43f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4e94:	4806      	ldr	r0, [pc, #24]	; (d4eb0 <module_user_init_hook+0x60>)
   d4e96:	2100      	movs	r1, #0
   d4e98:	f7ff ba92 	b.w	d43c0 <system_ctrl_set_app_request_handler>
   d4e9c:	2003f400 	.word	0x2003f400
   d4ea0:	000d4d91 	.word	0x000d4d91
   d4ea4:	9a271c1e 	.word	0x9a271c1e
   d4ea8:	2003e7c0 	.word	0x2003e7c0
   d4eac:	00000000 	.word	0x00000000
   d4eb0:	000d4e19 	.word	0x000d4e19

000d4eb4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d4eb4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d4eb6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d4eb8:	d902      	bls.n	d4ec0 <pinAvailable+0xc>
    return false;
   d4eba:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d4ebc:	b002      	add	sp, #8
   d4ebe:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d4ec0:	f1a0 030b 	sub.w	r3, r0, #11
   d4ec4:	2b02      	cmp	r3, #2
   d4ec6:	d81a      	bhi.n	d4efe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4ec8:	4c17      	ldr	r4, [pc, #92]	; (d4f28 <pinAvailable+0x74>)
   d4eca:	7821      	ldrb	r1, [r4, #0]
   d4ecc:	f3bf 8f5b 	dmb	ish
   d4ed0:	f011 0101 	ands.w	r1, r1, #1
   d4ed4:	d10b      	bne.n	d4eee <pinAvailable+0x3a>
   d4ed6:	4620      	mov	r0, r4
   d4ed8:	9101      	str	r1, [sp, #4]
   d4eda:	f7ff f8de 	bl	d409a <__cxa_guard_acquire>
   d4ede:	9901      	ldr	r1, [sp, #4]
   d4ee0:	b128      	cbz	r0, d4eee <pinAvailable+0x3a>
   d4ee2:	4812      	ldr	r0, [pc, #72]	; (d4f2c <pinAvailable+0x78>)
   d4ee4:	f7ff fd48 	bl	d4978 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4ee8:	4620      	mov	r0, r4
   d4eea:	f7ff f8db 	bl	d40a4 <__cxa_guard_release>
   d4eee:	4b0f      	ldr	r3, [pc, #60]	; (d4f2c <pinAvailable+0x78>)
   d4ef0:	7818      	ldrb	r0, [r3, #0]
   d4ef2:	f7ff f9dd 	bl	d42b0 <hal_spi_is_enabled>
   d4ef6:	2800      	cmp	r0, #0
   d4ef8:	d1df      	bne.n	d4eba <pinAvailable+0x6>
  return true; // 'pin' is available
   d4efa:	2001      	movs	r0, #1
   d4efc:	e7de      	b.n	d4ebc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d4efe:	2801      	cmp	r0, #1
   d4f00:	d809      	bhi.n	d4f16 <pinAvailable+0x62>
   d4f02:	f000 f857 	bl	d4fb4 <_Z19__fetch_global_Wirev>
   d4f06:	2100      	movs	r1, #0
   d4f08:	7c00      	ldrb	r0, [r0, #16]
   d4f0a:	f7ff f9a1 	bl	d4250 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d4f0e:	f080 0001 	eor.w	r0, r0, #1
   d4f12:	b2c0      	uxtb	r0, r0
   d4f14:	e7d2      	b.n	d4ebc <pinAvailable+0x8>
   d4f16:	3809      	subs	r0, #9
   d4f18:	2801      	cmp	r0, #1
   d4f1a:	d8ee      	bhi.n	d4efa <pinAvailable+0x46>
   d4f1c:	f7ff fe4c 	bl	d4bb8 <_Z22__fetch_global_Serial1v>
   d4f20:	7c00      	ldrb	r0, [r0, #16]
   d4f22:	f7ff f9fd 	bl	d4320 <hal_usart_is_enabled>
   d4f26:	e7f2      	b.n	d4f0e <pinAvailable+0x5a>
   d4f28:	2003e7c8 	.word	0x2003e7c8
   d4f2c:	2003e7cc 	.word	0x2003e7cc

000d4f30 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4f30:	2823      	cmp	r0, #35	; 0x23
{
   d4f32:	b538      	push	{r3, r4, r5, lr}
   d4f34:	4604      	mov	r4, r0
   d4f36:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4f38:	d80a      	bhi.n	d4f50 <pinMode+0x20>
   d4f3a:	29ff      	cmp	r1, #255	; 0xff
   d4f3c:	d008      	beq.n	d4f50 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d4f3e:	f7ff ffb9 	bl	d4eb4 <pinAvailable>
   d4f42:	b128      	cbz	r0, d4f50 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d4f44:	4629      	mov	r1, r5
   d4f46:	4620      	mov	r0, r4
}
   d4f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d4f4c:	f7ff b940 	b.w	d41d0 <HAL_Pin_Mode>
}
   d4f50:	bd38      	pop	{r3, r4, r5, pc}

000d4f52 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d4f52:	b538      	push	{r3, r4, r5, lr}
   d4f54:	4604      	mov	r4, r0
   d4f56:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d4f58:	f7ff f942 	bl	d41e0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d4f5c:	28ff      	cmp	r0, #255	; 0xff
   d4f5e:	d010      	beq.n	d4f82 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d4f60:	2806      	cmp	r0, #6
   d4f62:	d804      	bhi.n	d4f6e <digitalWrite+0x1c>
   d4f64:	234d      	movs	r3, #77	; 0x4d
   d4f66:	fa23 f000 	lsr.w	r0, r3, r0
   d4f6a:	07c3      	lsls	r3, r0, #31
   d4f6c:	d409      	bmi.n	d4f82 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d4f6e:	4620      	mov	r0, r4
   d4f70:	f7ff ffa0 	bl	d4eb4 <pinAvailable>
   d4f74:	b128      	cbz	r0, d4f82 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d4f76:	4629      	mov	r1, r5
   d4f78:	4620      	mov	r0, r4
}
   d4f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d4f7e:	f7ff b937 	b.w	d41f0 <HAL_GPIO_Write>
}
   d4f82:	bd38      	pop	{r3, r4, r5, pc}

000d4f84 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d4f84:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d4f86:	2300      	movs	r3, #0
   d4f88:	2520      	movs	r5, #32
   d4f8a:	8043      	strh	r3, [r0, #2]
   d4f8c:	2314      	movs	r3, #20
{
   d4f8e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d4f90:	8003      	strh	r3, [r0, #0]
   d4f92:	6085      	str	r5, [r0, #8]
   d4f94:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f96:	4906      	ldr	r1, [pc, #24]	; (d4fb0 <_Z17acquireWireBufferv+0x2c>)
   d4f98:	4628      	mov	r0, r5
   d4f9a:	f000 f83a 	bl	d5012 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f9e:	4904      	ldr	r1, [pc, #16]	; (d4fb0 <_Z17acquireWireBufferv+0x2c>)
	};
   d4fa0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4fa2:	4628      	mov	r0, r5
   d4fa4:	f000 f835 	bl	d5012 <_ZnajRKSt9nothrow_t>
	};
   d4fa8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d4faa:	4620      	mov	r0, r4
   d4fac:	bd38      	pop	{r3, r4, r5, pc}
   d4fae:	bf00      	nop
   d4fb0:	000d5250 	.word	0x000d5250

000d4fb4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d4fb4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4fb6:	4d0f      	ldr	r5, [pc, #60]	; (d4ff4 <_Z19__fetch_global_Wirev+0x40>)
   d4fb8:	7829      	ldrb	r1, [r5, #0]
   d4fba:	f3bf 8f5b 	dmb	ish
   d4fbe:	f011 0401 	ands.w	r4, r1, #1
{
   d4fc2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4fc4:	d113      	bne.n	d4fee <_Z19__fetch_global_Wirev+0x3a>
   d4fc6:	4628      	mov	r0, r5
   d4fc8:	f7ff f867 	bl	d409a <__cxa_guard_acquire>
   d4fcc:	b178      	cbz	r0, d4fee <_Z19__fetch_global_Wirev+0x3a>
   d4fce:	a801      	add	r0, sp, #4
   d4fd0:	f7ff ffd8 	bl	d4f84 <_Z17acquireWireBufferv>
   d4fd4:	aa01      	add	r2, sp, #4
   d4fd6:	4621      	mov	r1, r4
   d4fd8:	4807      	ldr	r0, [pc, #28]	; (d4ff8 <_Z19__fetch_global_Wirev+0x44>)
   d4fda:	f7ff fb3b 	bl	d4654 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d4fde:	4628      	mov	r0, r5
   d4fe0:	f7ff f860 	bl	d40a4 <__cxa_guard_release>
   d4fe4:	4a05      	ldr	r2, [pc, #20]	; (d4ffc <_Z19__fetch_global_Wirev+0x48>)
   d4fe6:	4906      	ldr	r1, [pc, #24]	; (d5000 <_Z19__fetch_global_Wirev+0x4c>)
   d4fe8:	4803      	ldr	r0, [pc, #12]	; (d4ff8 <_Z19__fetch_global_Wirev+0x44>)
   d4fea:	f000 f80b 	bl	d5004 <__aeabi_atexit>
	return wire;
}
   d4fee:	4802      	ldr	r0, [pc, #8]	; (d4ff8 <_Z19__fetch_global_Wirev+0x44>)
   d4ff0:	b007      	add	sp, #28
   d4ff2:	bd30      	pop	{r4, r5, pc}
   d4ff4:	2003e7d8 	.word	0x2003e7d8
   d4ff8:	2003e7dc 	.word	0x2003e7dc
   d4ffc:	2003e640 	.word	0x2003e640
   d5000:	000d45fd 	.word	0x000d45fd

000d5004 <__aeabi_atexit>:
   d5004:	460b      	mov	r3, r1
   d5006:	4601      	mov	r1, r0
   d5008:	4618      	mov	r0, r3
   d500a:	f000 b805 	b.w	d5018 <__cxa_atexit>

000d500e <_ZdlPvj>:
   d500e:	f7ff b842 	b.w	d4096 <_ZdlPv>

000d5012 <_ZnajRKSt9nothrow_t>:
   d5012:	f7ff b83e 	b.w	d4092 <_Znaj>
	...

000d5018 <__cxa_atexit>:
   d5018:	b510      	push	{r4, lr}
   d501a:	4c05      	ldr	r4, [pc, #20]	; (d5030 <__cxa_atexit+0x18>)
   d501c:	4613      	mov	r3, r2
   d501e:	b12c      	cbz	r4, d502c <__cxa_atexit+0x14>
   d5020:	460a      	mov	r2, r1
   d5022:	4601      	mov	r1, r0
   d5024:	2002      	movs	r0, #2
   d5026:	f3af 8000 	nop.w
   d502a:	bd10      	pop	{r4, pc}
   d502c:	4620      	mov	r0, r4
   d502e:	e7fc      	b.n	d502a <__cxa_atexit+0x12>
   d5030:	00000000 	.word	0x00000000

000d5034 <memcpy>:
   d5034:	440a      	add	r2, r1
   d5036:	4291      	cmp	r1, r2
   d5038:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d503c:	d100      	bne.n	d5040 <memcpy+0xc>
   d503e:	4770      	bx	lr
   d5040:	b510      	push	{r4, lr}
   d5042:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5046:	f803 4f01 	strb.w	r4, [r3, #1]!
   d504a:	4291      	cmp	r1, r2
   d504c:	d1f9      	bne.n	d5042 <memcpy+0xe>
   d504e:	bd10      	pop	{r4, pc}

000d5050 <memset>:
   d5050:	4402      	add	r2, r0
   d5052:	4603      	mov	r3, r0
   d5054:	4293      	cmp	r3, r2
   d5056:	d100      	bne.n	d505a <memset+0xa>
   d5058:	4770      	bx	lr
   d505a:	f803 1b01 	strb.w	r1, [r3], #1
   d505e:	e7f9      	b.n	d5054 <memset+0x4>

000d5060 <srand>:
   d5060:	b538      	push	{r3, r4, r5, lr}
   d5062:	4b0d      	ldr	r3, [pc, #52]	; (d5098 <srand+0x38>)
   d5064:	681d      	ldr	r5, [r3, #0]
   d5066:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5068:	4604      	mov	r4, r0
   d506a:	b97b      	cbnz	r3, d508c <srand+0x2c>
   d506c:	2018      	movs	r0, #24
   d506e:	f7ff fa1b 	bl	d44a8 <malloc>
   d5072:	4a0a      	ldr	r2, [pc, #40]	; (d509c <srand+0x3c>)
   d5074:	4b0a      	ldr	r3, [pc, #40]	; (d50a0 <srand+0x40>)
   d5076:	63a8      	str	r0, [r5, #56]	; 0x38
   d5078:	e9c0 2300 	strd	r2, r3, [r0]
   d507c:	4b09      	ldr	r3, [pc, #36]	; (d50a4 <srand+0x44>)
   d507e:	6083      	str	r3, [r0, #8]
   d5080:	230b      	movs	r3, #11
   d5082:	8183      	strh	r3, [r0, #12]
   d5084:	2201      	movs	r2, #1
   d5086:	2300      	movs	r3, #0
   d5088:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d508c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d508e:	2200      	movs	r2, #0
   d5090:	611c      	str	r4, [r3, #16]
   d5092:	615a      	str	r2, [r3, #20]
   d5094:	bd38      	pop	{r3, r4, r5, pc}
   d5096:	bf00      	nop
   d5098:	2003e5dc 	.word	0x2003e5dc
   d509c:	abcd330e 	.word	0xabcd330e
   d50a0:	e66d1234 	.word	0xe66d1234
   d50a4:	0005deec 	.word	0x0005deec

000d50a8 <strcmp>:
   d50a8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d50ac:	f811 3b01 	ldrb.w	r3, [r1], #1
   d50b0:	2a01      	cmp	r2, #1
   d50b2:	bf28      	it	cs
   d50b4:	429a      	cmpcs	r2, r3
   d50b6:	d0f7      	beq.n	d50a8 <strcmp>
   d50b8:	1ad0      	subs	r0, r2, r3
   d50ba:	4770      	bx	lr

000d50bc <strlen>:
   d50bc:	4603      	mov	r3, r0
   d50be:	f813 2b01 	ldrb.w	r2, [r3], #1
   d50c2:	2a00      	cmp	r2, #0
   d50c4:	d1fb      	bne.n	d50be <strlen+0x2>
   d50c6:	1a18      	subs	r0, r3, r0
   d50c8:	3801      	subs	r0, #1
   d50ca:	4770      	bx	lr

000d50cc <dynalib_user>:
   d50cc:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d50dc:	0000 0000 7267 6565 006e 6c62 6575 7200     ....green.blue.r
   d50ec:	6465 6f00 6666 6c00 6465 0000               ed.off.led..

000d50f8 <_ZTVN5spark13EthernetClassE>:
	...
   d5100:	45df 000d 45d5 000d 45cb 000d 45c1 000d     .E...E...E...E..
   d5110:	45b5 000d 45a9 000d 459d 000d 4595 000d     .E...E...E...E..
   d5120:	458b 000d 4581 000d 47d5 000d               .E...E...G..

000d512c <_ZTV7TwoWire>:
	...
   d5134:	45fd 000d 4647 000d 461f 000d 45ff 000d     .E..GF...F...E..
   d5144:	4627 000d 462f 000d 4637 000d 463f 000d     'F../F..7F..?F..

000d5154 <_ZTV9IPAddress>:
	...
   d515c:	4689 000d 4679 000d 467b 000d 7061 0070     .F..yF..{F..app.

000d516c <_ZTVN5spark12NetworkClassE>:
	...
   d5174:	476d 000d 4777 000d 4781 000d 478b 000d     mG..wG...G...G..
   d5184:	4795 000d 47a1 000d 47ad 000d 47b9 000d     .G...G...G...G..
   d5194:	47c1 000d 47cb 000d 47d5 000d 5925 252d     .G...G...G..%Y-%
   d51a4:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d51b4:	7361 7463 6d69 0065                         asctime.

000d51bc <_ZTV11USARTSerial>:
	...
   d51c4:	4b11 000d 4b7d 000d 4b55 000d 48bd 000d     .K..}K..UK...H..
   d51d4:	4b25 000d 4b41 000d 4b33 000d 4b4f 000d     %K..AK..3K..OK..
   d51e4:	4b13 000d 4b17 000d                         .K...K..

000d51ec <_ZTV9USBSerial>:
	...
   d51f4:	4c11 000d 4c79 000d 4c4f 000d 48bd 000d     .L..yL..OL...H..
   d5204:	4c41 000d 4c13 000d 4c23 000d 4c73 000d     AL...L..#L..sL..
   d5214:	4c33 000d 4c0d 000d                         3L...L..

000d521c <_ZTVN5spark9WiFiClassE>:
	...
   d5224:	4d73 000d 4d69 000d 4d5f 000d 4d15 000d     sM..iM.._M...M..
   d5234:	4d53 000d 4d47 000d 4d3b 000d 4d33 000d     SM..GM..;M..3M..
   d5244:	4d29 000d 4d1f 000d 47d5 000d               )M...M...G..

000d5250 <_ZSt7nothrow>:
	...

000d5251 <link_const_variable_data_end>:
   d5251:	00          	.byte	0x00
	...

000d5254 <link_constructors_location>:
   d5254:	000d4187 	.word	0x000d4187
   d5258:	000d44f9 	.word	0x000d44f9
   d525c:	000d45e9 	.word	0x000d45e9
   d5260:	000d475d 	.word	0x000d475d
   d5264:	000d48a9 	.word	0x000d48a9
   d5268:	000d495d 	.word	0x000d495d
   d526c:	000d4ac1 	.word	0x000d4ac1
   d5270:	000d4afd 	.word	0x000d4afd
   d5274:	000d4d7d 	.word	0x000d4d7d

000d5278 <link_constructors_end>:
	...
